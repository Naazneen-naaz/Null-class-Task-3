#!/usr/bin/env python
# coding: utf-8

# In[9]:


import numpy as np
import os
import cv2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import tkinter as tk
from tkinter import filedialog
from PIL import Image as PILImage, ImageTk

# Set parameters
image_height, image_width = 150, 150  # Set your image size
batch_size = 32

# Define paths to your datasets
train_data_dir = r"C:\Users\shaik\Desktop\train 3"  # Update with your train dataset path
val_data_dir = r"C:\Users\shaik\Desktop\val 3"  # Update with your validation dataset path
test_data_dir = r"C:\Users\shaik\Desktop\test3"  # Update with your test dataset path (if applicable)

# Create an ImageDataGenerator for training and validation
train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

# Load images from the directory
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(image_height, image_width),
    batch_size=batch_size,
    class_mode='categorical'
)

val_generator = val_datagen.flow_from_directory(
    val_data_dir,
    target_size=(image_height, image_width),
    batch_size=batch_size,
    class_mode='categorical'
)

# Define the model creation function
def create_model(image_height, image_width, num_classes):
    model = Sequential()
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(image_height, image_width, 3)))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(num_classes, activation='softmax'))
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    
    return model

# Create your model
model = create_model(image_height, image_width, train_generator.num_classes)

# Fit the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    validation_data=val_generator,
    validation_steps=val_generator.samples // batch_size,
    epochs=10  # Adjust epochs as needed
)

# Function to preprocess and predict image
def detect_cars_and_people(frame):
    # Resize frame for model prediction
    processed_frame = cv2.resize(frame, (image_width, image_height))
    processed_frame = np.expand_dims(processed_frame, axis=0) / 255.0  # Normalize
    
    # Perform prediction
    predictions = model.predict(processed_frame)
    car_color = np.argmax(predictions, axis=1)[0]  # Get the predicted car color class

    # Get class labels
    class_labels = train_generator.class_indices  # Dictionary mapping class names to indices

    # Draw appropriate rectangles based on car color
    if car_color == class_labels['blue']:  # If the predicted class is 'blue'
        cv2.rectangle(frame, (50, 50), (100, 100), (255, 0, 0), 2)  # Draw blue rectangle for blue cars
    elif car_color == class_labels['red']:  # If the predicted class is 'red'
        cv2.rectangle(frame, (50, 50), (100, 100), (0, 0, 255), 2)  # Draw red rectangle for red cars
    else:
        cv2.rectangle(frame, (50, 50), (100, 100), (0, 255, 0), 2)  # Draw green rectangle for other car colors

    # Add logic to count and display the number of people detected (if necessary)
    return frame

# GUI setup
def load_image():
    file_path = filedialog.askopenfilename()
    frame = cv2.imread(file_path)

    # Call the detection function
    result_frame = detect_cars_and_people(frame)

    # Convert to PIL Image and display
    img_rgb = cv2.cvtColor(result_frame, cv2.COLOR_BGR2RGB)
    img_pil = PILImage.fromarray(img_rgb)
    img_tk = ImageTk.PhotoImage(img_pil)
    
    image_label.configure(image=img_tk)
    image_label.image = img_tk

# Create the GUI window
root = tk.Tk()
root.title("Car Color Detection")
root.geometry("800x600")

# Set up the image label and load button
image_label = tk.Label(root)
image_label.pack()

load_button = tk.Button(root, text="Load Image", command=load_image)
load_button.pack()

# Start the GUI main loop
root.mainloop()


# In[ ]:




